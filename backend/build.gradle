import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

buildscript {
    ext {
        restdocsApiSpecVersion = '0.18.2'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'

    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'zipgo'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.8"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.1'

    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
    testImplementation 'io.rest-assured:rest-assured'

    swaggerUI 'org.webjars:swagger-ui:4.11.1'
}

openapi3 {
    setServer("http://localhost:8080")
    title = "집사의고민 API Docs"
    description = "집사의고민 API 명세서"
    version = "1.0.0"
    format = "yaml"
}

tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
    doLast {
        delete file('src/main/resources/static/docs/')
        copy {
            from outputDir.toPath()
            into "src/main/resources/static/docs/"
        }
    }
}

swaggerSources {
    zipgo {
        setInputFile(file("src/main/resources/static/docs/openapi3.yaml"))
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        html.required = true

        html.destination file("${buildDir}/jacoco/index.html")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/*Response*',
                            '**/*Request*'
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }

            excludes = [
                    '*.*Application',
                    '*.*Exception',
                    '*.*Response',
                    '*.*Request'
            ]
        }
    }
}

build {
    dependsOn generateSwaggerUI
}

bootJar {
    dependsOn generateSwaggerUI
}
